# Generate C language sources from "imspinner.h" written in C++.
# Input file: libs/imspinner/imspinner.h
# Output files:
#   ./cimspinner.h
#   ./cimspinner.cpp


File.open("libs/imspinner/imspinner.h"){|fp|
  cppFile = []
  cppFile.push "#include \"cimspinner_config.h\""
  cppFile.push "\n#include \"imspinner.h\""
  cppFile.push "#include \"cimspinner.h\""
  cppFile.push ""
  cfuncHeader = []
  cfuncHeader.push "\n#pragma once"
  cfuncHeader.push "#ifdef __cplusplus"
  cfuncHeader.push "extern \"C\" {"
  cfuncHeader.push "#endif"
  cfuncHeader.push "\n#ifndef CIMSPINNER_API\n  #define CIMSPINNER_API\n#endif"
  cfuncHeader.push ""
  aryEnableDefine = []
  fp.each {|line|
    if  line =~ /\s+inline\s+void\s+(Spinner\w+)\((.+)\)/
      cargsShortDef = []
      cppargsShort = []
      cargsLongDef = []
      cppargsLong = []
      funcname = $1
      cppargs = $2
      ######
      if line =~/LeafColor/
        puts "------ Eliminated function at this moment"
        puts line
        puts "-----------------------------------------"
        next
      end
      ######
      cppFile.push  "\n/* C++ definition"
      cppFile.push  "   void Spinner::#{funcname}(#{cppargs.gsub("/*","").gsub("*/","")})"
      cppFile.push  "*/"
      # get short argumants
      # void SpinnerFadeBars(const char *label, float w, const ImColor &color = white, float speed = 2.8f, size_t bars = 3, bool scale = false)
      cppargs.split(",").each {|arg|
        if not arg.include? "="
          # C function args short
          cargsShortDef.push arg.gsub("&","").gsub("/*","").gsub("*/","")
          # Cpp args short
          cppargsShort.push arg.gsub("/*","").gsub("*/","").split(" ").last.gsub("*","").gsub("&","")
        else
          cargsLongDef.push arg.split("=")[0].gsub("&","").strip
          cppargsLong.push  arg.split("=")[0].split(" ").last.gsub("&","")
        end
      }
      #-------------------------------------------------
      # Generate C header file Short arguments function
      #-------------------------------------------------
      sEnableDefine = "SPINNER_#{funcname.split("Spinner")[1].upcase}"
      aryEnableDefine.push  "//#define #{sEnableDefine}"
      cargs = cargsShortDef.join(",")
      cfunc = "CIMSPINNER_API void #{funcname}(#{cargs})"
      cfuncHeader.push  cfunc + ";\n"
      #-------------------------------------------------
      # Generate cpp function call with short arguments
      #-------------------------------------------------
      cppFile.push "#ifdef #{sEnableDefine}"
      cppFile.push "#{cfunc} \{"
      shortArgs = cppargsShort.join(", ")
      cppFile.push "  ImSpinner::#{funcname}(#{shortArgs});"
      cppFile.push "}"
      #---------------------------------------
      # Generate C header file long arguments
      #---------------------------------------
      if 0 != cargsLongDef.length
        cargs = cargs + ","  + cargsLongDef.join(", ")
        cfunc = "CIMSPINNER_API void #{funcname}Ex(#{cargs})"
        cfuncHeader.push  cfunc + ";\n"
        cppFile.push "#{cfunc} \{"
        ##------------------------------------------------
        ## Generate cpp function call with long arguments
        ##------------------------------------------------
        longArgs = cppargsLong.join(", ")
        cppFile.push "  ImSpinner::#{funcname}(#{shortArgs}, #{longArgs});"
        cppFile.push "}"
      end
      cppFile.push "#endif"
    end
  }
  # Output CPP source
  File.open("cimspinner.cpp","w") {|fp|
    cppFile.each {|line|
      fp.puts line
    }
    fp.puts "\n#ifdef IMSPINNER_DEMO"
    fp.puts "CIMSPINNER_API void demoSpinners() {\n  ImSpinner::demoSpinners(); \n}"
    fp.puts "#endif"
  }
  # Output C Header file

  File.open("cimspinner.h","w") {|fp|
    fp.puts "/*\n This files has been auto generated by srcript.\n Don't edit this file.\n*/"
    fp.puts "#include \"cimspinner_config.h\""
    aryEnableDefine.each {|line|
      fp.puts line.chomp
    }
    cfuncHeader.each {|line|
      fp.puts line.chomp
    }
    fp.puts "\nCIMSPINNER_API void demoSpinners();"
    fp.puts "#ifdef __cplusplus"
    fp.puts "}"
    fp.puts "#endif"
  }
}
